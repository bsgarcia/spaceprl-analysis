devtools::install_github('akcochrane/TEfits', build_vignettes = TRUE)
install(devtools)
install.packages(devtools)
install.packages('devtools')
install.packages('devtools')
devtools::install_github('akcochrane/TEfits', build_vignettes = TRUE)
devtools::install_github('akcochrane/TEfits', build_vignettes = TRUE)
pkgbuild::find_rtools()
install.packages(c("knitr", "rmarkdown"))
devtools::install_github("akcochrane/TEfits", build_vignettes = TRUE)
devtools::install_github("akcochrane/TEfits", build_vignettes = TRUE, dependencies = TRUE)
install.packages(c("tidyr", "lme4", "rmarkdown", "knitr"))
install.packages(c("tidyr", "lme4", "rmarkdown", "knitr"))
tidyr
tidyr()
library(tidyr)
devtools::install_github("akcochrane/TEfits", build_vignettes = TRUE, dependencies = TRUE)
devtools::install_github("akcochrane/TEfits", build_vignettes = FALSE, dependencies = TRUE)
library(brms)
library(TEfits)
# load dataset
df = read.csv('../data/raw/fullpilot13_2.csv')
setwd("P:/CodeProjects/Current/spaceprl-analysis/notebooks")
library(brms)
library(TEfits)
# load dataset
df = read.csv('../data/raw/fullpilot13_2.csv')
library(brms)
library(TEfits)
# load dataset
df <- read.csv('../data/raw/fullpilot13_2.csv')
df <- df %>% filter(expName == 'FullPilot12')
df <- df %>% filter(df.expName == 'FullPilot12')
library(brms)
library(TEfits)
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12"))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
library(brms)
library(TEfits)
library(dplyr)
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12"))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12", 'FullPilot13'))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# Compute 'opti_ss'
df$opti_ss <- ((df$m1 > df$m2) & (df$choice == 1)) | ((df$m1 < df$m2) & (df$choice == 2))
# Compute 'opti_ff'
df$opti_ff <- ((df$p1 > df$p2) & (df$choice == 1)) | ((df$p1 < df$p2) & (df$choice == 2))
# Compute 'opti_ev'
df$opti_ev <- ((df$ev1 > df$ev2) & (df$choice == 1)) | ((df$ev1 < df$ev2) & (df$choice == 2))
library(TEfits)
# generate artificial data:
dat_simple  <- data.frame(response=log(2:31)/log(32),trial_number=1:30)
# fit a `TEfit` model
mod_simple <- TEfit(dat_simple[,c('response','trial_number')])
plot(mod_simple,plot_title='Time-evolving fit of artificial data')
df <- df[df$session==2]
df <- df[df$session=2]
df <- df[df$session==2]
df <- df[df$session==2,]
df
df <- df[df$session==2,]
# fit a `TEfit` model
mod_simple <- TEfit(df[,c('opti_ss','t')])
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12", 'FullPilot13'))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# ----------------------------
# Compute 'opti_ss'
df$opti_ss <- ((df$m1 > df$m2) & (df$choice == 1)) | ((df$m1 < df$m2) & (df$choice == 2))
# Compute 'opti_ff'
df$opti_ff <- ((df$p1 > df$p2) & (df$choice == 1)) | ((df$p1 < df$p2) & (df$choice == 2))
# Compute 'opti_ev'
df$opti_ev <- ((df$ev1 > df$ev2) & (df$choice == 1)) | ((df$ev1 < df$ev2) & (df$choice == 2))
df <- df[df$session==2,]
# fit a `TEfit` model
mod_simple <- TEfit(df[,c('opti_ss','t')])
df
library(brms)
library(TEfits)
library(dplyr)
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12", 'FullPilot13'))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# ----------------------------
# Compute 'opti_ss'
df$opti_ss <- ((df$m1 > df$m2) & (df$choice == 1)) | ((df$m1 < df$m2) & (df$choice == 2))
# Compute 'opti_ff'
df$opti_ff <- ((df$p1 > df$p2) & (df$choice == 1)) | ((df$p1 < df$p2) & (df$choice == 2))
# Compute 'opti_ev'
df$opti_ev <- ((df$ev1 > df$ev2) & (df$choice == 1)) | ((df$ev1 < df$ev2) & (df$choice == 2))
df <- df[df$session==2,]
# fit a `TEfit` model
mod_simple <- TEfit(df,c('opti_ss','t')])
# fit a `TEfit` model
mod_simple <- TEfit(df,c('opti_ss','t'))
library(brms)
library(brms)
library(TEfits)
library(dplyr)
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12", 'FullPilot13'))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# ----------------------------
# Compute 'opti_ss'
df$opti_ss <- ((df$m1 > df$m2) & (df$choice == 1)) | ((df$m1 < df$m2) & (df$choice == 2))
# Compute 'opti_ff'
df$opti_ff <- ((df$p1 > df$p2) & (df$choice == 1)) | ((df$p1 < df$p2) & (df$choice == 2))
# Compute 'opti_ev'
df$opti_ev <- ((df$ev1 > df$ev2) & (df$choice == 1)) | ((df$ev1 < df$ev2) & (df$choice == 2))
df <- df[df$session==2,]
# fit a `TEfit` model
mod_simple <- TEfit(df[,c('opti_ss','t')])
View(mod_simple)
View(mod_simple)
View(df)
library(brms)
library(TEfits)
library(dplyr)
# Read the CSV file
df <- read.csv("../data/raw/fullpilot13_2.csv")
# Filter rows where expName is 'FullPilot12'
df <- subset(df, expName %in% c("FullPilot12", 'FullPilot13'))
# Group by prolificID and filter groups with at least 480 rows
df <- df %>%
group_by(prolificID) %>%
filter(n() >= 480) %>%
ungroup()
# Keep prolificIDs that are more than 10 characters long
df <- df[nchar(df$prolificID) > 10, ]
# Show the number of unique prolificIDs
length(unique(df$prolificID))
# ----------------------------
# Compute 'opti_ss'
df$opti_ss <- ((df$m1 > df$m2) & (df$choice == 1)) | ((df$m1 < df$m2) & (df$choice == 2))
# Compute 'opti_ff'
df$opti_ff <- ((df$p1 > df$p2) & (df$choice == 1)) | ((df$p1 < df$p2) & (df$choice == 2))
# Compute 'opti_ev'
df$opti_ev <- ((df$ev1 > df$ev2) & (df$choice == 1)) | ((df$ev1 < df$ev2) & (df$choice == 2))
df <- df[df$session==2,]
# fit a `TEfit` model
# Ensure the data is numeric
df$opti_ss <- as.numeric(df$opti_ss)
df$t <- as.numeric(df$t)
# Convert to a matrix if required
input_data <- as.matrix(df[, c('opti_ss', 't')])
# Fit the TEfit model
mod_simple <- TEfit(input_data)
